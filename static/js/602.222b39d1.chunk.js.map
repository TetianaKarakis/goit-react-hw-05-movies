{"version":3,"file":"static/js/602.222b39d1.chunk.js","mappings":"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","sources":["pages/EditorList/EditorList.styled.jsx","pages/EditorList/EditorList.jsx","components/Form/Form.styled.jsx","components/Form/Form.jsx","pages/Movies/Movies.jsx","services/TmbdApi.jsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const List = styled.ul`\n  list-style-type: none;\n`;\n\nexport const Item = styled.li`\n  font-weight: 600;\n  font-size: 18px;\n  margin-bottom: 10px;\n`;\n\nexport const MovieLink = styled(Link)`\n  text-decoration: none;\n  color: #191d1e;\n\n  &:hover {\n    color: tomato;\n  }\n`;","import PropTypes from 'prop-types';\nimport { List, Item, MovieLink } from './EditorList.styled';\n\nconst EditorList = ({ films, prevLocation }) => {\n  return (\n    <List>\n      {films.map(film => (\n        <Item key={film.id}>\n          <MovieLink to={`/movies/${film.id}`} state={{ from: prevLocation }}>\n            {film.title}\n          </MovieLink>\n        </Item>\n      ))}\n    </List>\n  );\n};\n\nEditorList.propTypes = {\n  films: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      id: PropTypes.number.isRequired,\n    })\n  ),\n};\n\nexport default EditorList;\n","import styled from '@emotion/styled';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  align-items: center;\n`;\n\nexport const Input = styled.input`\n  padding: 12px 14px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  margin-right: 10px;\n  border-radius: 4px 8px;\n  outline: none;\n\n  &:hover {\n    color: tomato;\n    border: 3px solid tomato;\n  }\n`;\n\nexport const Button = styled.button`\n  padding: 12px 12px;\n  font: inherit;\n  cursor: pointer;\n  border-radius: 4px;\n  border: 3px solid #191d1e;\n  color: #191d1e;\n  font-weight: 600;\n  font-size: 20px;\n  border-radius: 4px 8px;\n\n  &:hover {\n    color: tomato;\n    border: 3px solid tomato;\n  }\n`;","import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { SearchForm, Input, Button } from './Form.styled';\n\nconst Form = ({ searchMovies }) => {\n  const [query, setQuery] = useState('');\n\n  const handleInputChange = event => {\n    setQuery(event.target.value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    searchMovies(query.toLowerCase());\n    setQuery(\"\");\n  };\n\n  return (\n    <SearchForm onSubmit={handleSubmit}>\n      <Input\n        type=\"text\"\n        name=\"query\"\n        autoFocus\n        value={query}\n        onChange={handleInputChange}\n      />\n       \n      <Button type=\"submit\">Search</Button>\n      \n    </SearchForm>\n  );\n};\n\nForm.propTypes = {\n  searchMovies: PropTypes.func.isRequired,\n};\n\nexport default Form;","import { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport Loader from 'components/Loader/Loader';\nimport EditorList from 'pages/EditorList/EditorList';\nimport Form from 'components/Form/Form';\nimport { fetchSearchByKeyword } from 'services/TmbdApi';\n\nconst Movies = () => {\n  const [searchFilms, setSearchFilms] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [noMoviesText, setNoMoviesText] = useState(false);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n  const searchRequest = searchParams.get('query');\n\n  useEffect(() => {\n    if (!searchRequest) {\n      return;\n    }\n\n    const searchMovies = () => {\n      setLoading(true);\n\n      fetchSearchByKeyword(searchRequest)\n        .then(searchResults => {\n          if (!searchResults.length) {\n            alert('No movies found!');\n          }\n          setSearchFilms(searchResults);\n          setNoMoviesText(searchResults.length === 0);\n        })\n        .catch(error => {\n          console.log(error);\n        })\n        .finally(setLoading(false));\n    };\n\n    searchMovies();\n  }, [searchRequest]);\n\n  function onSubmit(value) {\n    setSearchParams({ query: `${value}` });\n  }\n\n  return (\n    <main>\n      <Form searchMovies={onSubmit} />\n      {loading && <Loader />}\n      {noMoviesText && (\n        <p>There is no movies with this request. Please, try again</p>\n      )}\n      {searchFilms && (\n        <EditorList films={searchFilms} prevLocation={location} />\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst API_KEY = '992758a4802a699e8df27d4d6efc34fb';\n\nexport const fetchTrending = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  return response.data.results;\n};\n\nexport const fetchSearchByKeyword = async keyword => {\n  console.log(keyword);\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&language=en-US&page=1&include_adult=false&query=${keyword}`\n  );\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nexport const fetchActors = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return response.data.results;\n};"],"names":["List","styled","Item","MovieLink","Link","films","prevLocation","map","film","to","id","state","from","title","SearchForm","Input","Button","searchMovies","useState","query","setQuery","onSubmit","event","preventDefault","toLowerCase","type","name","autoFocus","value","onChange","target","searchFilms","setSearchFilms","loading","setLoading","noMoviesText","setNoMoviesText","useSearchParams","searchParams","setSearchParams","location","useLocation","searchRequest","get","useEffect","fetchSearchByKeyword","then","searchResults","length","alert","catch","error","console","log","finally","Loader","EditorList","axios","API_KEY","fetchTrending","response","data","results","keyword","fetchMovieDetails","movieId","fetchActors","cast","fetchReviews"],"sourceRoot":""}